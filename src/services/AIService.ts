// Servicio de IA para UpnAssist
// Soporta Ollama (local) y OpenRouter (online) como fallback

interface AIMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
  timestamp: Date;
}

export interface AIResponse {
  message: string;
  source: 'ollama' | 'openrouter' | 'fallback';
  model?: string;
  error?: string;
}

class AIService {
  private baseKnowledge: string = '';
  private conversation: AIMessage[] = [];
  private ollamaUrl: string = 'http://localhost:11434';
  private openRouterKey: string = ''; // Usuario puede agregar su clave opcional

  constructor() {
    this.loadBaseKnowledge();
    this.initializeSystemPrompt();
  }

  private async loadBaseKnowledge(): Promise<void> {
    try {
      // En producci√≥n, esto se cargar√≠a desde el servidor
      // Por ahora, incluimos el conocimiento base directamente
      this.baseKnowledge = `
Eres un asistente especializado en UpnAssist, una aplicaci√≥n web para profesores universitarios de la UPN.

CONOCIMIENTO BASE:
- UpnAssist es desarrollado por Xabier Olaz Moratinos
- Es una herramienta de ayuda personal docente e investigador
- Web: https://upnassist.vercel.app/

FUNCIONALIDADES PRINCIPALES:
1. Dashboard con calendario de 6 clases semanales
2. Detector de Copias para an√°lisis de plagios
3. Chat en tiempo real (m√°ximo 50 usuarios)
4. Sistema de correo integrado
5. Gesti√≥n de recursos acad√©micos
6. Herramientas de c√°lculo de notas

UBICACIONES UPN:
- A-329 Aulario
- E-201 Los Encinas  
- P-103 Los Pinos

HORARIOS:
- Lunes 08:00: Programaci√≥n I (45 estudiantes)
- Martes 10:00: Estructuras de Datos (38 estudiantes)
- Mi√©rcoles 09:00: Bases de Datos (42 estudiantes)
- Jueves 14:00: Programaci√≥n I (45 estudiantes)
- Viernes 11:00: Estructuras de Datos (38 estudiantes)
- S√°bado 08:00: Bases de Datos (42 estudiantes)

TECNOLOG√çAS:
- React 18 + TypeScript
- Tailwind CSS
- Vite
- Socket.io para chat

INSTRUCCIONES:
- Responde siempre en espa√±ol
- S√© conciso pero informativo
- Si no sabes algo espec√≠fico, sugiere d√≥nde podr√≠a encontrarse
- Ayuda con funcionalidades como imprimir, exportar, subir archivos
- Proporciona pasos claros y precisos
`;
    } catch (error) {
      console.warn('No se pudo cargar el conocimiento base:', error);
    }
  }

  private initializeSystemPrompt(): void {
    this.conversation = [{
      role: 'system',
      content: this.baseKnowledge,
      timestamp: new Date()
    }];
  }

  // Intentar con Ollama primero (local, gratuito)
  private async queryOllama(message: string): Promise<AIResponse> {
    try {
      const response = await fetch(`${this.ollamaUrl}/api/generate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model: 'llama3.2:3b', // Modelo peque√±o pero eficiente
          prompt: this.buildPrompt(message),
          stream: false,
          options: {
            temperature: 0.7,
            top_p: 0.9,
            max_tokens: 500
          }
        })
      });

      if (!response.ok) throw new Error('Ollama no disponible');      const data = await response.json();
      return {
        message: data.response,
        source: 'ollama',
        model: 'llama3.2:3b'
      };
    } catch (error) {
      throw new Error(`Ollama error: ${error}`);
    }
  }

  // Fallback a OpenRouter (online, gratuito con l√≠mites)
  private async queryOpenRouter(message: string): Promise<AIResponse> {
    try {
      // Usar modelo gratuito de OpenRouter
      const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.openRouterKey || 'sk-or-v1-free'}`,
          'Content-Type': 'application/json',
          'HTTP-Referer': 'https://upnassist.vercel.app',
          'X-Title': 'UpnAssist AI Assistant'
        },
        body: JSON.stringify({
          model: 'mistralai/mistral-7b-instruct:free', // Modelo gratuito
          messages: [
            { role: 'system', content: this.baseKnowledge },
            { role: 'user', content: message }
          ],
          max_tokens: 500,
          temperature: 0.7
        })
      });

      if (!response.ok) throw new Error('OpenRouter no disponible');      const data = await response.json();
      return {
        message: data.choices[0].message.content,
        source: 'openrouter',
        model: 'mistral-7b-instruct'
      };
    } catch (error) {
      throw new Error(`OpenRouter error: ${error}`);
    }
  }

  // Respuestas predefinidas como √∫ltimo recurso
  private getFallbackResponse(message: string): AIResponse {
    const lowercaseMessage = message.toLowerCase();
    
    // Respuestas espec√≠ficas de UpnAssist
    if (lowercaseMessage.includes('imprimir')) {
      return {
        message: 'üñ®Ô∏è Para imprimir en UpnAssist:\n\n1. Presiona Ctrl+P en tu teclado\n2. O ve al men√∫ del navegador ‚Üí Imprimir\n3. En Dashboard y Recursos ver√°s opciones espec√≠ficas de exportaci√≥n\n\n¬øTe ayudo con algo m√°s espec√≠fico?',
        source: 'fallback'
      };
    }

    if (lowercaseMessage.includes('exportar') || lowercaseMessage.includes('descargar')) {
      return {
        message: 'üìä Para exportar datos en UpnAssist:\n\n‚Ä¢ **Dashboard**: Exporta horarios y estad√≠sticas desde los botones de acci√≥n\n‚Ä¢ **Detector de Copias**: Descarga reportes de an√°lisis\n‚Ä¢ **Recursos**: Bot√≥n "Descargar" en cada archivo\n‚Ä¢ **Correo**: Funci√≥n de exportar conversaciones\n\n¬øQu√© espec√≠ficamente quieres exportar?',
        source: 'fallback'
      };
    }

    if (lowercaseMessage.includes('subir') || lowercaseMessage.includes('archivo')) {
      return {
        message: 'üìÅ Para subir archivos en UpnAssist:\n\n‚Ä¢ **Detector de Copias**: Arrastra archivos o usa "Seleccionar Archivos" (PDF, DOC, DOCX, TXT m√°x. 10MB)\n‚Ä¢ **Recursos**: Bot√≥n "Subir" en la biblioteca\n‚Ä¢ **Chat**: Solo texto, no soporta archivos\n\n¬øEn qu√© secci√≥n necesitas subir archivos?',
        source: 'fallback'
      };
    }

    if (lowercaseMessage.includes('horario') || lowercaseMessage.includes('clase')) {
      return {
        message: 'üìÖ **Horarios de Clases en UpnAssist:**\n\n‚Ä¢ Lunes 08:00 - Programaci√≥n I (A-329 Aulario, 45 estudiantes)\n‚Ä¢ Martes 10:00 - Estructuras de Datos (E-201 Los Encinas, 38 estudiantes)\n‚Ä¢ Mi√©rcoles 09:00 - Bases de Datos (P-103 Los Pinos, 42 estudiantes)\n‚Ä¢ Jueves 14:00 - Programaci√≥n I (A-329 Aulario, 45 estudiantes)\n‚Ä¢ Viernes 11:00 - Estructuras de Datos (E-201 Los Encinas, 38 estudiantes)\n‚Ä¢ S√°bado 08:00 - Bases de Datos (P-103 Los Pinos, 42 estudiantes)\n\nVe al Dashboard para ver el calendario completo.',
        source: 'fallback'
      };
    }

    if (lowercaseMessage.includes('chat') || lowercaseMessage.includes('mensaje')) {
      return {
        message: 'üí¨ **Chat en UpnAssist:**\n\n‚Ä¢ Tiempo real hasta 50 usuarios concurrentes\n‚Ä¢ Funciona entre diferentes redes (WiFi, m√≥viles)\n‚Ä¢ Solo texto, no archivos\n‚Ä¢ Acceso desde cualquier dispositivo\n‚Ä¢ Sin necesidad de registro\n\nVe a la pesta√±a "Chat" para empezar a conversar.',
        source: 'fallback'
      };
    }

    if (lowercaseMessage.includes('m√≥vil') || lowercaseMessage.includes('celular') || lowercaseMessage.includes('telefono')) {
      return {
        message: 'üì± **UpnAssist en M√≥vil:**\n\n‚Ä¢ Accede desde cualquier navegador: https://upnassist.vercel.app/\n‚Ä¢ 100% responsivo y t√°ctil\n‚Ä¢ Navegaci√≥n optimizada por pesta√±as\n‚Ä¢ Todas las funciones disponibles\n‚Ä¢ Compatible con Android e iOS\n\n¬°√ösalo desde donde est√©s!',
        source: 'fallback'
      };
    }

    // Respuesta gen√©rica
    return {
      message: 'ü§ñ ¬°Hola! Soy el asistente de UpnAssist.\n\n**Puedo ayudarte con:**\n‚Ä¢ Funcionalidades de la aplicaci√≥n\n‚Ä¢ C√≥mo imprimir, exportar o subir archivos\n‚Ä¢ Informaci√≥n sobre horarios y clases\n‚Ä¢ Gu√≠a del chat y herramientas\n‚Ä¢ Navegaci√≥n en m√≥vil y desktop\n\n**Preg√∫ntame cosas como:**\n"¬øC√≥mo imprimir mi horario?"\n"¬øD√≥nde subo archivos al detector de copias?"\n"¬øCu√°les son mis clases de esta semana?"\n\n¬øEn qu√© te puedo ayudar?',
      source: 'fallback'
    };
  }

  private buildPrompt(userMessage: string): string {
    return `${this.baseKnowledge}

CONVERSACI√ìN ANTERIOR:
${this.conversation.slice(-3).map(msg => 
  msg.role === 'user' ? `Usuario: ${msg.content}` : 
  msg.role === 'assistant' ? `Asistente: ${msg.content}` : ''
).filter(Boolean).join('\n')}

NUEVA PREGUNTA:
Usuario: ${userMessage}

Asistente: `;
  }

  async sendMessage(message: string): Promise<AIResponse> {
    // Agregar mensaje del usuario a la conversaci√≥n
    this.conversation.push({
      role: 'user',
      content: message,
      timestamp: new Date()
    });

    try {
      // Intentar Ollama primero (local, ilimitado)
      const response = await this.queryOllama(message);
      
      // Agregar respuesta a la conversaci√≥n
      this.conversation.push({
        role: 'assistant',
        content: response.message,
        timestamp: new Date()
      });

      return response;
    } catch (ollamaError) {
      try {
        // Fallback a OpenRouter (online, l√≠mites generosos)
        const response = await this.queryOpenRouter(message);
        
        this.conversation.push({
          role: 'assistant',
          content: response.message,
          timestamp: new Date()
        });

        return response;
      } catch (openRouterError) {
        // √öltimo recurso: respuestas predefinidas
        const response = this.getFallbackResponse(message);
        
        this.conversation.push({
          role: 'assistant',
          content: response.message,
          timestamp: new Date()
        });

        return response;
      }
    }
  }
  // Limpiar conversaci√≥n
  clearConversation(): void {
    this.initializeSystemPrompt();
  }

  // Alias para compatibilidad
  clearContext(): void {
    this.clearConversation();
  }

  // Obtener conversaci√≥n actual
  getConversation(): AIMessage[] {
    return this.conversation.filter(msg => msg.role !== 'system');
  }

  // Configurar clave de OpenRouter (opcional)
  setOpenRouterKey(key: string): void {
    this.openRouterKey = key;
  }

  // Verificar si Ollama est√° disponible
  async checkOllamaAvailability(): Promise<boolean> {
    try {
      const response = await fetch(`${this.ollamaUrl}/api/version`, {
        method: 'GET',
        signal: AbortSignal.timeout(3000)
      });
      return response.ok;
    } catch {
      return false;
    }
  }

  // Obtener servicios disponibles
  async getAvailableServices(): Promise<{ollama: boolean, openrouter: boolean}> {
    const ollama = await this.checkOllamaAvailability();
    const openrouter = !!this.openRouterKey;
    return { ollama, openrouter };
  }
}

export default AIService;

const aiService = new AIService();
export { aiService };
